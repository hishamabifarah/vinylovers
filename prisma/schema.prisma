// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model EmailVerificationToken {
  id         String   @id
  userId     String
  email      String
  expires_at DateTime
}

model PasswordResetToken {
  token_hash String   @unique
  user_id    String
  expires_at DateTime
}

model User {
  id           String   @id // this field is unique identifier in prisma
  username     String   @unique
  displayName  String
  email        String?  @unique // optional because user might use google signin
  passwordHash String? // optional because user might use google signin
  googleId     String?  @unique // optional because user might use google signin
  avatarUrl    String?
  bio          String?
  createdAt    DateTime @default(now())
  verified     Boolean  @default(false)

  sessions  Session[] // named sessions not session because one user might have multiple sessions
  vinyls    Vinyl[]
  posts     Post[]
  following Follow[]   @relation("Following")
  followers Follow[]   @relation("Followers")
  likes     Like[]
  bookmarks Bookmark[]
   comments    Comment[]

  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")

  @@map("users") // rename table to users but model for each user is User
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  // created automatically by prisma if we format the code
  // one to many relationship between Session and User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId]) // many to many unique Ids, makes sure each user follows other user once 
  @@map("follows")
}

model Vinyl {
  id        String  @id @default(cuid())
  artist    String
  album     String
  userId    String
  genreId   String
  thumbnail String?
  hashtags  String?

  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])
  genre       Genre      @relation(fields: [genreId], references: [id])
  attachments Media[]
  likes       Like[]
  bookmarks   Bookmark[]
  comments    Comment[]

  linkedNotifications Notification[]

  @@index([genreId])
  @@map("vinyls")
}

model Media {
  id      String    @id @default(cuid())
  vinylId String? // user might upload media but not save the new vinyl so it wont have a vinylId
  vinyl   Vinyl?    @relation(fields: [vinylId], references: [id], onDelete: SetNull) // same as vinylId, setNull: if we delete  a vinyl we want to still be able to find its corresponding media to delete them
  type    MediaType
  url     String

  createdAt DateTime @default(now())

  @@map("vinyls_media")
}

model Comment {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  vinylId  String
  vinyl    Vinyl   @relation(fields: [vinylId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("comments")
}


model Like {
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  vinylId String
  vinyl   Vinyl  @relation(fields: [vinylId], references: [id], onDelete: Cascade)

  @@unique([userId, vinylId]) // make sure each user like vinyl once
  @@map("likes")
}

model Bookmark {
  id      String @id @default(cuid()) // unlike Like model, we need id here because we need cursor for loading more
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  vinylId String
  vinyl   Vinyl  @relation(fields: [vinylId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, vinylId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  vinylId     String?
  vinyl       Vinyl?           @relation(fields: [vinylId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}

enum MediaType {
  IMAGE
  VIDEO
}

model Genre {
  id        String  @id
  name      String
  thumbnail String
  vinyls    Vinyl[]

  @@map("genres")
}

model Post {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("posts")
}
